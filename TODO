TODO:

- Add XDA and XCL in circuit and revise the rest of components against the master circuit for the mpu6050 DONE
- Solder I2C pins in tree hat DONE
- Revise the whole INT circuitry with external engineer. DONE
- Revise INT pin and disconnect via software and hardware, since the relevant circuitry gives a permanent HIGH. Basically de'solder the stud from the heltec
- Test that voltage arrives to the accel of the hat from vext DONE. It does
- Verufy LED in hat works via gpio 3 and 4. DONE
- report ECOMINGA in writing about hardware tests and that there will be at least 2 more manufactured test boards before installation. DONE


- implement deep sleep cycling DONE

- Fine tune the detection frequency for machete and handsaw

- Current measurements idle and computing Work values+sending over lora( write small snippet) on batt only DONE

- Create pcb hat and plan out for several op amp footprints (as purchased). embedd MPU6050 DONE

- Decide whether mosfet is needed after all. list pros and cons anyway DONE



Batch Creation:DONE
Define conditions for creating a batch (e.g., number of cycles before going to sleep, sufficient vibration data).
Create batches of data that include accelerometer values, sampling cycle references, and timestamps.

Excel File Handling:DONE
Implement functionality to write batches to an Excel file stored locally on the ESP32S3 memory.
You may need to explore libraries or develop your own functions to handle Excel file operations in C.

MQTT Integration:
Implement MQTT functionality to send the Excel file when required.
Use appropriate MQTT libraries compatible with the ESP32S3 and your MQTT broker.

Code Integration:
Integrate the above functionalities into the existing code structure, ensuring compatibility and proper function execution.
Modify the main loop to handle data collection, batch creation, Excel file writing, and MQTT communication based on your defined conditions.
